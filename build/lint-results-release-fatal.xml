<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright (C) 2014  Igor Bogoslavskyi
  ~ This file is part of LearnIt.
  ~ This program is free software: you can redistribute it and/or modify
  ~ it under the terms of the GNU General Public License as published
  ~ the Free Software Foundation, either version 3 of the License, or
  ~ (at your option) any later version.
  ~
  ~ This program is distributed in the hope that it will be useful,
  ~ but WITHOUT ANY WARRANTY; without even the implied warranty of
  ~ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  ~ GNU General Public License for more details.
  ~
  ~ You should have received a copy of the GNU General Public License
  ~ along with this program.  If not, see <http://www.gnu.org/licenses/>.
  -->

<issues format="4" by="lint 22.6.2">

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (com.learnit.LearnIt.fragments.AddWordFragment)"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1=" private AddWordFragment(WorkerFragment worker) {"
        errorLine2="         ~~~~~~~~~~~~~~~">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/src/com/learnit/LearnIt/fragments/AddWordFragment.java"
            line="43"
            column="10"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus Fragment#setArguments(Bundle) instead"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="  super();"
        errorLine2="  ^">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/src/com/learnit/LearnIt/fragments/AddWordFragment.java"
            line="44"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="This fragment should provide a default constructor (a public constructor with no arguments) (com.learnit.LearnIt.fragments.DictFragment)"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="public class DictFragment extends MySmartFragment"
        errorLine2="             ~~~~~~~~~~~~">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/src/com/learnit/LearnIt/fragments/DictFragment.java"
            line="25"
            column="14"/>
    </issue>

    <issue
        id="ValidFragment"
        severity="Fatal"
        message="Avoid non-default constructors in fragments: use a default constructor plus Fragment#setArguments(Bundle) instead"
        category="Correctness"
        priority="6"
        summary="Ensures that `Fragment` subclasses can be instantiated"
        explanation="From the Fragment documentation:
*Every* fragment must have an empty constructor, so it can be instantiated when restoring its activity&apos;s state. It is strongly recommended that subclasses do not have other constructors with parameters, since these constructors will not be called when the fragment is re-instantiated; instead, arguments can be supplied by the caller with `setArguments(Bundle)` and later retrieved by the Fragment with `getArguments()`."
        url="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        urls="http://developer.android.com/reference/android/app/Fragment.html#Fragment()"
        errorLine1="  super();"
        errorLine2="  ^">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/src/com/learnit/LearnIt/fragments/DictFragment.java"
            line="49"/>
    </issue>

    <issue
        id="MissingTranslation"
        severity="Fatal"
        message="&quot;layout_current&quot; is not translated in de, ru, uk"
        category="Correctness:Messages"
        priority="8"
        summary="Checks for incomplete translations where not all strings are translated"
        explanation="If an application has more than one locale, then all the strings declared in one language should also be translated in all other languages.

If the string should *not* be translated, you can add the attribute `translatable=&quot;false&quot;` on the `&lt;string>` element, or you can define all your non-translatable strings in a resource file called `donottranslate.xml`. Or, you can ignore the issue with a `tools:ignore=&quot;MissingTranslation&quot;` attribute.

By default this detector allows regions of a language to just provide a subset of the strings and fall back to the standard language strings. You can require all regions to provide a full translation by setting the environment variable `ANDROID_LINT_COMPLETE_REGIONS`.

You can tell lint (and other tools) which language is the default language in your `res/values/` folder by specifying `tools:locale=&quot;languageCode&quot;` for the root `&lt;resources>` element in your resource file. (The `tools` prefix refers to the namespace declaration `http://schemas.android.com/tools`.)"
        errorLine1="    &lt;string name=&quot;layout_current&quot; translatable=&quot;false&quot;>large_landscape&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
        quickfix="adt">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/res/values-large-land/strings.xml"
            line="7"
            column="13"/>
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/res/values-xlarge/strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="ExtraTranslation"
        severity="Fatal"
        message="The resource string &quot;layout_current&quot; has been marked as translatable=&quot;false&quot;"
        category="Correctness:Messages"
        priority="6"
        summary="Checks for translations that appear to be unused (no default language string)"
        explanation="If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.).

Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up."
        errorLine1="    &lt;string name=&quot;layout_current&quot;>xlarge&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/res/values-xlarge/strings.xml"
            line="7"
            column="13"/>
    </issue>

    <issue
        id="ExtraTranslation"
        severity="Fatal"
        message="&quot;hello_world&quot; is translated here but not found in default locale"
        category="Correctness:Messages"
        priority="6"
        summary="Checks for translations that appear to be unused (no default language string)"
        explanation="If a string appears in a specific language translation file, but there is no corresponding string in the default locale, then this string is probably unused. (It&apos;s technically possible that your application is only intended to run in a specific locale, but it&apos;s still a good idea to provide a fallback.).

Note that these strings can lead to crashes if the string is looked up on any locale not providing a translation, so it&apos;s important to clean them up."
        errorLine1="    &lt;string name=&quot;hello_world&quot;>Hello world!&lt;/string>"
        errorLine2="            ~~~~~~~~~~~~~~~~~~">
        <location
            file="/home/igor/AndroidStudioProjects/LearnIt/res/values-ru/strings.xml"
            line="20"
            column="13"/>
    </issue>

</issues>
