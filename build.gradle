import java.util.regex.Pattern

/*
 * Copyright (C) 2014  Igor Bogoslavskyi
 * This file is part of LearnIt.
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:0.12.+'
    }
}
apply plugin: 'com.android.application'

repositories {
    mavenCentral()
    maven {
        url 'https://raw.github.com/elodieferrais/wonder-libraries/master'
        name 'github-wonder-libraries'
    }
}

dependencies {
    compile 'com.astuetz:pagerslidingtabstrip:1.0.1'
    compile('de.keyboardsurfer.android.widget:crouton:1.8.4@aar') {
        exclude group: 'com.google.android', module: 'support-v4'
    }
    compile 'com.android.support:support-v4:20.0.0'
    compile 'com.android.support:support-v13:20.0.0'
    compile 'net.yscs.android:square_progressbar:1.3.0'
    compile 'com.github.dmytrodanylyk.circular-progress-button:library:1.1.3'
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.1.0"

    sourceSets {
        main {
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets']
        }
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebugBuild true
            runProguard false
            signingConfig signingConfigs.debug
        }
    }
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 19
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    if (project.hasProperty("learnit.signing")
            && new File(project.property("learnit.signing") + ".gradle").exists()) {
        apply from: project.property("learnit.signing") + ".gradle";
    }
}



task('increaseVersionCode') << {
    def manifestFile = file("AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()
    def versionCode = Integer.parseInt(matcher.group(1))
    def manifestContent = matcher.replaceAll("versionCode=\"" + ++versionCode + "\"")
    manifestFile.write(manifestContent)
}

task('increaseBuildVersion') << {
    def stringsSource = file("res/values/donottranslate.xml")
    def pattern = Pattern.compile("<string name=\"version\">(\\d+)\\.(\\d+)\\.(\\d+)</string>")
    def versionText = stringsSource.getText()
    def matcher = pattern.matcher(versionText)
    matcher.find()
    def majorVersion = Integer.parseInt(matcher.group(1))
    def minorVersion = Integer.parseInt(matcher.group(2))
    def buildVersion = Integer.parseInt(matcher.group(3))
    def mNextVersionName = majorVersion + "." + minorVersion + "." + (buildVersion + 1)
    def newStrings = matcher.replaceAll("<string name=\"version\">" + mNextVersionName + "</string>")
    stringsSource.write(newStrings)
}

tasks.whenTaskAdded { task ->
    if (task.name == 'generateReleaseBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'increaseBuildVersion'
    }
    if (task.name == 'generateDebugBuildConfig') {
        task.dependsOn 'increaseVersionCode'
        task.dependsOn 'increaseBuildVersion'
    }
}
